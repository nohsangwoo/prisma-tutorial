// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  age              Int
  name             String?
  email            String          @unique
  role             Role            @default(BASIC) // Enum을 타입으로 받아 지정할 수도 있다.
  isAdmin          Boolean
  // preferences    Json
  // blob        Unsupported("") // prisma가 지원하지 않는 타입을 사용하고싶을때
  writtenPosts     Post[]          @relation("WrittenPosts")
  favoritePosts    Post[]          @relation("FavoritePosts")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique

  @@unique([age, name]) // 이렇게 한번에 속성을 정의해줄 수도 있다. (검색시 age_name으로 조건을 지정할 수 있다.)
  @@index([email]) // db에서 검색속도 높이려고하는 indexing과 개념이 똑같다. 배열안에 들어가 있는내용이 인덱싱을 하는 기준.
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  rating        Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categorues    Category[]

  // @@id([title, authorId]) // 이와같이 두가지 컬럼을 묶어서 id로 잡을 수도있다.
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  EDITOR
  ADMIN
}
